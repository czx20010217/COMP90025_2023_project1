--- ../COMP90025_2023_project1.old/PQ-Dijkstra.c	2023-09-05 16:45:20.072138400 +1000
+++ PQ-Dijkstra.c	2023-09-05 16:04:57.086341300 +1000
@@ -3,6 +3,7 @@
 #include <string.h>
 #include <float.h>      // for DBL_MAX
 #include <time.h>       // for clock()
+#include <sys/time.h>       // for clock()
 
 #define MAX_NODES 100000
 
@@ -15,6 +16,16 @@
 //#define DEBUG1(x) x
 #define DEBUG1(x)
 
+// From https://stackoverflow.com/questions/17432502/how-can-i-measure-cpu-time-and-wall-clock-time-on-both-linux-windows
+double get_wall_time() {
+    struct timeval time;
+    if (gettimeofday(&time,NULL)){
+        //  Handle error
+        return 0;
+    }
+    return (double)time.tv_sec + (double)time.tv_usec * .000001;
+}
+
 void
 assert_msg (int cond, char *msg)
 {
@@ -67,7 +78,7 @@
     const unsigned long m = 2147483647;
 
     /* For debugging only */
-    return (seed);
+    // return (seed);
 
     /* Real code */
     seed = -seed;       // Make high bits non-zero
@@ -240,7 +251,7 @@
 
     node *pivot;
     node **cand = init_cand (x_size, y_size);
-    cand[0][0].cost = board[0][0];
+    cand[0][0].cost = cell_cost (board[0][0], &par);
 
     while (!is_equal(pivot = pq_pop_min(), x_end, y_end)) {
         pivot->is_closed = CLOSED;
@@ -277,10 +288,10 @@
 
     node *p = &cand[x_end][y_end];
     while (!is_equal(p, 0, 0)) {
-        printf ("%d %d\n", p->x, p->y);
+        printf ("%d %d %g %g\n", p->x, p->y, board[p->x][p->y], p->cost);
         p = &(cand[p->prev_x][p->prev_y]);
     }
-    printf ("%d %d\n", 0, 0);
+    printf ("%d %d %g %g\n", 0, 0, board[0][0], p->cost);
 }
 
 /******************************************************************************/
@@ -299,8 +310,9 @@
 
 
     clock_t t = clock();
+    double w = get_wall_time ();
     a_star (board, x_size, y_size, par);
-    printf ("Time: %ld\n", clock() - t);
+    printf ("Time: %ld %lf\n", clock() - t, get_wall_time() - w);
 
     return 0;
 }
